import{v as p}from"./validate.5eb70dfd.js";let o;const y=new Uint8Array(16);function m(){if(!o&&(o=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!o))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return o(y)}const i=[];for(let n=0;n<256;++n)i.push((n+256).toString(16).slice(1));function c(n,t=0){return(i[n[t+0]]+i[n[t+1]]+i[n[t+2]]+i[n[t+3]]+"-"+i[n[t+4]]+i[n[t+5]]+"-"+i[n[t+6]]+i[n[t+7]]+"-"+i[n[t+8]]+i[n[t+9]]+"-"+i[n[t+10]]+i[n[t+11]]+i[n[t+12]]+i[n[t+13]]+i[n[t+14]]+i[n[t+15]]).toLowerCase()}function g(n,t=0){const d=c(n,t);if(!p(d))throw TypeError("Stringified UUID is invalid");return d}const a=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),r={randomUUID:a};function l(n,t,d){if(r.randomUUID&&!t&&!n)return r.randomUUID();n=n||{};const u=n.random||(n.rng||m)();if(u[6]=u[6]&15|64,u[8]=u[8]&63|128,t){d=d||0;for(let e=0;e<16;++e)t[d+e]=u[e];return t}return c(u)}export{m as r,g as s,c as u,l as v};
